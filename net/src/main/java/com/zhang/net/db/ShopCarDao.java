package com.zhang.net.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhang.net.ShopCar;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOP_CAR".
*/
public class ShopCarDao extends AbstractDao<ShopCar, Long> {

    public static final String TABLENAME = "SHOP_CAR";

    /**
     * Properties of entity ShopCar.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Goodsname = new Property(1, String.class, "goodsname", false, "GOODSNAME");
        public final static Property Goodsmsg = new Property(2, String.class, "goodsmsg", false, "GOODSMSG");
        public final static Property Pic = new Property(3, String.class, "pic", false, "PIC");
        public final static Property Price = new Property(4, float.class, "price", false, "PRICE");
        public final static Property Num = new Property(5, int.class, "num", false, "NUM");
        public final static Property IsCheck = new Property(6, boolean.class, "isCheck", false, "IS_CHECK");
    }


    public ShopCarDao(DaoConfig config) {
        super(config);
    }
    
    public ShopCarDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOP_CAR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GOODSNAME\" TEXT," + // 1: goodsname
                "\"GOODSMSG\" TEXT," + // 2: goodsmsg
                "\"PIC\" TEXT," + // 3: pic
                "\"PRICE\" REAL NOT NULL ," + // 4: price
                "\"NUM\" INTEGER NOT NULL ," + // 5: num
                "\"IS_CHECK\" INTEGER NOT NULL );"); // 6: isCheck
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOP_CAR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShopCar entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String goodsname = entity.getGoodsname();
        if (goodsname != null) {
            stmt.bindString(2, goodsname);
        }
 
        String goodsmsg = entity.getGoodsmsg();
        if (goodsmsg != null) {
            stmt.bindString(3, goodsmsg);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(4, pic);
        }
        stmt.bindDouble(5, entity.getPrice());
        stmt.bindLong(6, entity.getNum());
        stmt.bindLong(7, entity.getIsCheck() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShopCar entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String goodsname = entity.getGoodsname();
        if (goodsname != null) {
            stmt.bindString(2, goodsname);
        }
 
        String goodsmsg = entity.getGoodsmsg();
        if (goodsmsg != null) {
            stmt.bindString(3, goodsmsg);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(4, pic);
        }
        stmt.bindDouble(5, entity.getPrice());
        stmt.bindLong(6, entity.getNum());
        stmt.bindLong(7, entity.getIsCheck() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ShopCar readEntity(Cursor cursor, int offset) {
        ShopCar entity = new ShopCar( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // goodsname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goodsmsg
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pic
            cursor.getFloat(offset + 4), // price
            cursor.getInt(offset + 5), // num
            cursor.getShort(offset + 6) != 0 // isCheck
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShopCar entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGoodsname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGoodsmsg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPic(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.getFloat(offset + 4));
        entity.setNum(cursor.getInt(offset + 5));
        entity.setIsCheck(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShopCar entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShopCar entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShopCar entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
